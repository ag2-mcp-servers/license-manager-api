# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:55:51+00:00

from __future__ import annotations

from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class AppKey(BaseModel):
    name: Optional[str] = None
    token: Optional[str] = None


class Contact(BaseModel):
    email: Optional[str] = Field(None, description='Email of the contact')
    name: Optional[str] = Field(None, description='Name of the contact')
    phone: Optional[str] = Field(None, description='Phone of the contact')


class Sponsor(BaseModel):
    email: Optional[str] = Field(None, description='Email of the sponsor user')
    name: Optional[str] = Field(None, description='Name of the sponsor user')
    phone: Optional[str] = Field(None, description='Phone of the sponsor user')


class AppKeyItems(BaseModel):
    appKey: Optional[str] = Field(
        None, description='AppKey (Access Key in the license manager UI)'
    )
    appToken: Optional[str] = Field(
        None, description='AppToken. For security reasons, should always be null.'
    )
    createdIn: Optional[datetime] = Field(
        None, description='Creation date of the application key'
    )
    id: Optional[str] = Field(None, description='ID of the application key')
    isActive: Optional[bool] = Field(
        None, description='If the application key is active'
    )
    isBlocked: Optional[bool] = Field(
        None, description='If the application key is blocked'
    )
    label: Optional[str] = Field(None, description='Label of the application key')


class CreateUserRequest(BaseModel):
    email: str = Field(..., description='Email of the user')
    name: str = Field(..., description='Name of the user')


class CreatenewappkeyRequest(BaseModel):
    label: str = Field(..., description='Label for application key')


class CreatenewappkeyResponse(BaseModel):
    appKey: str = Field(
        ..., description='AppKey (Access Key in the license manager UI)'
    )
    appToken: str = Field(..., description='Secret of application key')
    createdIn: datetime = Field(..., description='Date of creation of application key')
    id: str = Field(..., description='ID of application key')
    isActive: bool = Field(..., description='If the application key is active')
    label: str = Field(..., description='Label for application key')


class Getappkeysfromaccount(BaseModel):
    appKey: str = Field(
        ..., description='AppKey (Access Key in the license manager UI)'
    )
    createdIn: datetime = Field(..., description='Date of creation of application key')
    id: str = Field(..., description='ID of application key')
    isActive: bool = Field(..., description='If the application key is active')
    label: str = Field(..., description='Label for application key')


class Endpoints(BaseModel):
    consoleUrl: Optional[str] = None
    webApiUrl: Optional[str] = None


class Product(BaseModel):
    domains: Optional[List[str]] = None
    endpoints: Optional[Endpoints] = None
    id: Optional[float] = Field(None, description='ID of the product')
    name: Optional[str] = Field(None, description='Name of the product')


class LicenseItems(BaseModel):
    expiration: Optional[datetime] = None
    id: Optional[float] = Field(None, description='ID of the category of the license')
    isPurchased: Optional[bool] = Field(None, description='If the license is purchased')
    name: Optional[str] = Field(None, description='Name of the category of the license')
    products: Optional[List[Product]] = Field(None, description='Array of products')


class Paging(BaseModel):
    page: int = Field(..., description='Current page number')
    pages: int = Field(..., description='Total of pages')
    perPage: int = Field(..., description='Items per page')
    total: int = Field(..., description='Total of items')


class ProductItems(BaseModel):
    categoryId: Optional[str] = None
    categoryName: Optional[str] = None
    consoleUrlMask: Optional[str] = None
    description: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = Field(None, description='Name of the product')
    productResources: Optional[str] = None
    url: Optional[str] = None
    urlConfiguration: Optional[str] = None
    webApiUrlMask: Optional[str] = None


class RoleItems(BaseModel):
    id: Optional[int] = Field(None, description='ID of the role')
    isAdmin: Optional[bool] = Field(None, description='If the role is admin')
    logins: Optional[str] = None
    name: Optional[str] = Field(None, description='Name of the role')
    products: Optional[List[ProductItems]] = Field(
        None, description='Array of product objects'
    )
    resources: Optional[str] = None
    roleType: Optional[int] = Field(
        None, description='Returns 1 for custom roles, and 0 otherwise'
    )


class SiteItems(BaseModel):
    LV: Optional[str] = None
    aliases: Optional[List[str]] = None
    domains: Optional[List[str]] = None
    hosts: Optional[List[str]] = Field(
        None, description='Hosts associated to the store'
    )
    id: Optional[float] = Field(None, description='ID of the store')
    logo: Optional[str] = None
    monetaryUnitId: Optional[float] = None
    name: Optional[str] = Field(None, description='Store name')
    tradingName: Optional[str] = Field(None, description='Trading name of the store')


class StoreItems(BaseModel):
    hosts: Optional[List[str]] = Field(
        None, description='Array of hosts corresponding to the store'
    )
    id: Optional[float] = Field(None, description='ID of the store')
    name: Optional[str] = Field(None, description='Name of the store')


class UpdateappkeyRequest(BaseModel):
    isActive: bool = Field(
        ..., description='If the application key should be active or inactive'
    )


class UserItems(BaseModel):
    accountNames: Optional[List[str]] = Field(
        None, description='Array of account names', max_length=0
    )
    email: Optional[str] = Field(None, description='Email of the user')
    id: Optional[str] = Field(None, description='ID of the user')
    isAdmin: Optional[bool] = Field(None, description='If user is admin')
    isBlocked: Optional[bool] = Field(None, description='If user is blocked')
    isReliable: Optional[bool] = Field(None, description='For internal use only')
    name: Optional[str] = Field(None, description='Name of the user')
    roles: Optional[List[str]] = Field(None, description='Array of roles', max_length=0)


class VLMError(BaseModel):
    Detais: Optional[str] = Field(None, description='Details of error')
    HttpStatusCode: Optional[int] = Field(
        None, description='Status code of HTTP response'
    )
    Message: Optional[str] = Field(None, description='Error message')
    VLMErrorCode: Optional[int] = Field(
        None, description='Error code for License Manager'
    )


class ApiLicenseManagerUsersPostResponse(BaseModel):
    email: Optional[str] = Field(None, description='Email of user')
    id: Optional[str] = Field(None, description='ID of user')
    name: Optional[str] = Field(None, description='Name of user')


class ApiLicenseManagerUsersPostResponse1(BaseModel):
    Message: Optional[str] = None


class ApiLicenseManagerUsersUserIdGetResponse(BaseModel):
    email: Optional[str] = Field(None, description='Email of user')
    id: Optional[str] = Field(None, description='ID of user')
    name: Optional[str] = Field(None, description='Name of user')


class ApiLicenseManagerUsersUserIdGetResponse1(BaseModel):
    Message: Optional[str] = Field(None, description='Error message')


class ApiLicenseManagerUsersUserIdRolesGetResponseItem(BaseModel):
    id: Optional[int] = Field(None, description='ID of role')
    name: Optional[str] = Field(None, description='Name of role')


class ApiLicenseManagerUsersUserIdRolesGetResponse(
    RootModel[List[ApiLicenseManagerUsersUserIdRolesGetResponseItem]]
):
    root: List[ApiLicenseManagerUsersUserIdRolesGetResponseItem] = Field(
        ..., description='Array of role objects'
    )


class ApiLicenseManagerUsersUserIdRolesPutRequest(RootModel[List[int]]):
    root: List[int] = Field(..., description='Array containing IDs of the roles')


class ApiLicenseManagerUsersUserIdRolesPutResponse(BaseModel):
    Message: Optional[str] = Field(None, description='Error message')


class ApiLicenseManagerUsersUserIdRolesPutResponse1(BaseModel):
    Message: Optional[str] = None


class ApiLicenseManagerUsersUserIdRolesRoleIdDeleteResponse(BaseModel):
    Message: Optional[str] = None


class ApiVlmAccountStoresGetResponse(RootModel[List[StoreItems]]):
    root: List[StoreItems] = Field(..., description='Array of store objects')


class ApiVlmAppkeysGetResponse(RootModel[List[Getappkeysfromaccount]]):
    root: List[Getappkeysfromaccount] = Field(
        ..., description='Array of AppKeys object'
    )


class AccountResponse(BaseModel):
    accountName: Optional[str] = Field(None, description='Account name')
    address: Optional[str] = Field(None, description='Address of contact')
    appKey: Optional[AppKey] = Field(
        None, description='Deprecated. Check appKeys object for all appKeys'
    )
    appKeys: Optional[List[AppKeyItems]] = Field(
        None, description='Array of application keys'
    )
    city: Optional[str] = Field(None, description='City of contact')
    cnpj: Optional[str] = Field(None, description='CNPJ (Tax ID) of account')
    companyName: Optional[str] = Field(None, description='Company name')
    complement: Optional[str] = Field(None, description='Additional address of contact')
    contact: Optional[Contact] = None
    country: Optional[str] = Field(None, description='Country of contact')
    creationDate: Optional[datetime] = Field(
        None, description='The date when the account was created'
    )
    defaultUrl: Optional[str] = None
    district: Optional[str] = Field(None, description='Neighborhood of contact')
    hasLogo: Optional[bool] = Field(None, description='If logo has been setup')
    haveParentAccount: Optional[bool] = Field(
        None, description='If it has a parent account'
    )
    hosts: Optional[List[str]] = Field(None, description='Hosts of all stores')
    id: Optional[str] = Field(None, description='ID of the account')
    inactivationDate: Optional[datetime] = Field(
        None, description='The date when the account was deactivated'
    )
    isActive: Optional[bool] = Field(None, description='If account is active or not')
    isOperating: Optional[bool] = Field(None, description='If it is in production')
    licenses: Optional[List[LicenseItems]] = Field(
        None, description='Licenses of the account'
    )
    logo: Optional[str] = Field(None, description='Filename of account logo')
    lv: Optional[str] = None
    name: Optional[str] = Field(None, description='Trading name')
    number: Optional[str] = Field(None, description='Number of the address of contact')
    operationDate: Optional[datetime] = Field(
        None, description='The date when the account went into production'
    )
    parentAccountId: Optional[str] = Field(
        None, description='The ID of the parent account'
    )
    parentAccountName: Optional[str] = Field(
        None, description='The name of the parent account'
    )
    postalCode: Optional[str] = Field(None, description='Zip Code of contact')
    sites: Optional[List[SiteItems]] = Field(
        None, description='Array of objects representing a store'
    )
    sponsor: Optional[Sponsor] = Field(
        None, description='Object representing the sponsor user'
    )
    state: Optional[str] = Field(None, description='State/Province of contact')
    telephone: Optional[str] = Field(None, description='Telephone of contact')
    tradingName: Optional[str] = Field(None, description='Trading name')


class ListRolesResponse(BaseModel):
    items: Optional[List[RoleItems]] = Field(None, description='Array of role objects')
    paging: Optional[Paging] = None


class ListUsersResponse(BaseModel):
    items: Optional[List[UserItems]] = Field(None, description='Array of user objects')
    paging: Optional[Paging] = None

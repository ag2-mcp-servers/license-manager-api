# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:55:51+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query

from models import (
    AccountResponse,
    ApiLicenseManagerUsersPostResponse,
    ApiLicenseManagerUsersPostResponse1,
    ApiLicenseManagerUsersUserIdGetResponse,
    ApiLicenseManagerUsersUserIdGetResponse1,
    ApiLicenseManagerUsersUserIdRolesGetResponse,
    ApiLicenseManagerUsersUserIdRolesPutRequest,
    ApiLicenseManagerUsersUserIdRolesPutResponse,
    ApiLicenseManagerUsersUserIdRolesPutResponse1,
    ApiLicenseManagerUsersUserIdRolesRoleIdDeleteResponse,
    ApiVlmAccountStoresGetResponse,
    ApiVlmAppkeysGetResponse,
    CreatenewappkeyRequest,
    CreatenewappkeyResponse,
    CreateUserRequest,
    ListRolesResponse,
    ListUsersResponse,
    UpdateappkeyRequest,
    VLMError,
)

app = MCPProxy(
    contact={},
    description='## Welcome!\r\n\r\nThe License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.\r\n\r\n### ATTRIBUTES\r\n\r\n|Attribute name | Description |\r\n|:------------|--------------|\r\n|accountName | Account name in VTEX License Manager |\r\n|environment | Environment on which you want to run the query e.g. vtexcommercestable |\r\n|userId      | Unique user identification string |\r\n|roleId      | Integer that represents a role, can be looked up on the License Manager UI |',
    title='License Manager API',
    version='1.0',
    servers=[
        {'url': 'https://vtex.local'},
        {
            'description': 'VTEX server url',
            'url': 'https://{accountName}.{environment}.com.br',
            'variables': {
                'accountName': {
                    'default': '{accountName}',
                    'description': 'Name of the VTEX account. Used as part of the URL',
                },
                'environment': {
                    'default': '{environment}',
                    'description': 'Environment to use. Used as part of the URL.',
                },
            },
        },
    ],
)


@app.get(
    '/api/license-manager/site/pvt/logins/list/paged',
    description=""" Returns a list of registered users. The response is divided in pages. The query parameter `numItems` defines the number of items in each page, and consequently the amount of pages for the whole list. """,
    tags=['user_account_operations', 'account_info_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_list_users(
    content__type: str = Header(..., alias='Content-Type'),
    num_items: Optional[int] = Query(10, alias='numItems'),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    sort: Optional[str] = 'name',
    sort_type: Optional[str] = Query('ASC', alias='sortType'),
):
    """
    Get List of Users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/license-manager/site/pvt/roles/list/paged',
    description=""" Returns a list of available roles. The response is divided in pages. The query parameter `numItems` defines the number of items in each page, and consequently the amount of pages for the whole list. """,
    tags=['user_account_operations', 'role_association_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_list_roles(
    content__type: str = Header(..., alias='Content-Type'),
    num_items: Optional[int] = Query(10, alias='numItems'),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    sort: Optional[str] = 'id',
    sort_type: Optional[str] = Query('ASC', alias='sortType'),
):
    """
    Get List of Roles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/license-manager/users',
    description=""" Allows you to create a user by providing an email (mandatory) and name (optional). The email must be in a valid format. The success response will contain the generated `userId` for that user. """,
    tags=['user_account_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_user(body: CreateUserRequest):
    """
    Create User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/license-manager/users/{userId}',
    description=""" Allows you to get a user from the database, using the `userId` as the identifier. """,
    tags=['user_account_operations', 'account_info_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_user(
    content__type: str = Header(..., alias='Content-Type'),
    user_id: str = Path(..., alias='userId'),
):
    """
    Get User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/license-manager/users/{userId}/roles',
    description=""" Gets roles of a particular user or application key. """,
    tags=[
        'user_account_operations',
        'role_association_management',
        'account_info_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_rolesby_user(
    content__type: str = Header(..., alias='Content-Type'),
    user_id: str = Path(..., alias='userId'),
):
    """
    Get Roles by User/appKey
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/license-manager/users/{userId}/roles',
    description=""" Allows you to add roles to a particular user or application key by specifying the list of roles' IDs on the request's body. """,
    tags=[
        'user_account_operations',
        'role_association_management',
        'application_key_management',
    ],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def put_rolesin_user(
    user_id: str = Path(..., alias='userId'),
    body: ApiLicenseManagerUsersUserIdRolesPutRequest = ...,
):
    """
    Put Roles in User/appKey
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/license-manager/users/{userId}/roles/{roleId}',
    description=""" Allows you to remove a role from a specific user or application key. This method only allows the removal of one role per request. The role's ID must be specified on the request path, not on the request body.


> Note that a successful response returns a `204` response with an empty body. A deletion on a role or user that does not exist will also return a `204`. Thus, this method should not be used to verify the existence of a specific user or role. """,
    tags=['user_account_operations', 'role_association_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def remove_rolefrom_user(
    content__type: str = Header(..., alias='Content-Type'),
    user_id: str = Path(..., alias='userId'),
    role_id: str = Path(..., alias='roleId'),
):
    """
    Remove Role from User/appKey
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/vlm/account',
    description=""" Retrieves information from an account, such as company and sponsor user details, stores, and appTokens.


This endpoint only accepts requests from the host list designated for that store. If you want to try this request from this portal, be sure to add it to the list. Learn how to add hosts to the list in [How to manage accounts](https://help.vtex.com/en/tutorial/how-to-manage-accounts--tutorials_6285#). """,
    tags=['user_account_operations', 'account_info_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_account():
    """
    Get information about account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/vlm/account/stores',
    description=""" Gets the stores and respective hosts of the account """,
    tags=['account_info_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_by_account():
    """
    Get Stores
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/vlm/appkeys',
    description=""" Gets all application keys from an account. """,
    tags=['account_info_management', 'application_key_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getappkeysfromaccount(content__type: str = Header(..., alias='Content-Type')):
    """
    Get appKeys from account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/vlm/appkeys',
    description=""" Creates a new pair of `appKey` and `appToken`. """,
    tags=['application_key_management', 'account_info_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def createnewappkey(body: CreatenewappkeyRequest):
    """
    Create new appkey
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/vlm/appkeys/{id}',
    description=""" Activates or deactivates an `appKey` by its ID. """,
    tags=['account_info_management', 'application_key_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def updateappkey(id: str, body: UpdateappkeyRequest = ...):
    """
    Update appkey
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
